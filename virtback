#! /usr/bin/python

############################################
# Author:    Russell.Ballestrini.net
# Date:      Fri Mar 18 15:56:59 EDT 2011
# License:   Public Domain
############################################

import libvirt
import tarfile
import syslog
from re import findall
from time import sleep
from datetime import date
from sys import exit
from optparse import OptionParser, OptionGroup
from os.path import isfile
from os import remove
from shutil import move, copy2

try:
    from operator import methodcaller
except ImportError:
    def methodcaller(name, *args, **kwargs):
        def caller(obj):
            return getattr(obj, name)(*args, **kwargs)
        return caller


def connect():
    """ connect to qemu with read write access"""
    url = 'qemu:///system' # cli option? reboot all on remote server?
    c = libvirt.open( url )
    libvirt.registerErrorHandler( logit, 'libvirt error - ') # register logit as the error handler
    assert c, 'Failed to open connection ' + url
    return c

def invoke( domList, method, active=None ):
    """pattern to invoke shutdown, destroy, and start on a list of doms"""
    f = methodcaller( method )
    for dom in domList:
        if dom.isActive() == active or active == None: # when active is None, do to all doms
            try:
                logit( method, 'invoking ' + method + ' on ' + dom.name() )
                retcode = f(dom)
                if retcode: logit( method, method + ' returned ' + str(retcode) + ' on ' + dom.name() ) # log retcode
            except libvirt.libvirtError:
                pass

def backup( domList ):
    """ Accept a domList, run backup proceedure on each """
    tarList = [] # this will be filled with tar filenames

    for dom in domList:
    
        recreate = dom.isActive()
    
        if dom.isActive(): # if dom is active, shutdown
            shutdown([dom])
            
        if dom.isActive(): # if dom is active, error
            logit( 'error', 'we could not shutdown or destroy ' + dom.name() + ' and the BACKUP FAILED!' )

        else: # backup
            xml = dom.XMLDesc( 0 )
            xmlfile = options.backpath + dom.name() + '.xml'
            f = open( xmlfile, 'w')
            f.write( xml )
            f.close()
            disklist = findall( "<source file='(.*)'/>\n", xml )

            logit( 'backup', 'invoking backup for ' + dom.name() )
            
            origfile = disklist[0]
            copyfile = options.backpath + origfile.split('/')[-1] # path to disk copy 
            copy2( origfile, copyfile )
            
            if recreate: # determine if guest should be started up after backup
                create([dom]) # start dom

            if options.tardate: tarpath = options.backpath + dom.name() + '-' + TODAY + '.tar.gz'
            else: tarpath = options.backpath + dom.name() + '.tar.gz'
            
            if isfile( tarpath ): # if the file exists, rotate up to 3 version
                logit( 'backup', 'rotating backup files for ' + dom.name() )
                try: remove( tarpath + '.2' )
                except OSError: pass
                
                try: move( tarpath + '.1', tarpath + '.2' )
                except IOError: pass
                
                move( tarpath, tarpath + '.1' )

            logit( 'backup', 'gzipping files for ' + dom.name() + ' to ' + tarpath )
            tar = tarfile.open( tarpath, 'w:gz' )
            tar.add( xmlfile ) # add xml to tar
            tar.add( copyfile ) # add img to tar 
            tar.close()
            remove( xmlfile ) # cleanup tmp files
            remove( copyfile ) # cleanup tmp files
            logit( 'backup', 'finished backup for ' + dom.name() )
            
def shutdown( domList, wait=45 ):
    """Accept a list of dom objects, attempt to shutdown the active ones"""
    invoke( domList, 'shutdown', active=True ) # if active, attempt shutdown   
    sleep( wait )
    invoke( domList, 'destroy', active=True ) # if active, attempt destroy
    sleep( wait/2 )

def create( domList ):
    """Accept a list of dom objects, attempt to start the inactive ones"""
    invoke( domList, 'create', active=False ) # if not active, attempt create   

def reboot( domList ):
    """Accept a list of dom objects, attempt to shutdown then start"""
    shutdown( domList )
    create( domList )
    
def info( domList ):
    """Accept a list of dom objects, attempt to display info for all"""
    invoke( domList, 'name' )
    invoke( domList, 'info')


def logit( context, message ):
    """syslog and error handler"""
    if type( message ) is tuple:
        message = message[2] # libvirt message is a tuple

    if options.verbose:
        print context + ': ' +  message

    syslog.openlog( 'virtback', 0, syslog.LOG_LOCAL3 )
    syslog.syslog( message )
    syslog.closelog()

def getoptions():
    """fetch cli args, parse and map to python, test sanity"""

    # create an option parcer object
    p = OptionParser()

    p.set_description(
    """A backup utility for QEMU or KVM guests. 
Virtback is a python application that uses the libvirt api to safely shutdown, gunzip, and restart guests.
The backup process logs to syslog for auditing and virtback works great with cron for scheduling outages.
Virtback has been placed in the public domain and the latest version may be downloaded here:
https://bitbucket.org/russellballestrini/virtback
    """)
    
    p.add_option( '-v', '--verbose', dest='verbose', action='store_true', default=False,
                  help='verbose output to stdout [default: no output]' )

    p.add_option( '-p', '--path', dest='backpath', metavar='\'PATH\'', default='/KVMBACK/',
                  help='backup path & trailing slash [default: \'/KVMBACK/\']' )
    
    p.add_option( '-d', '--date', dest='tardate', default=False, action='store_true',
                  help='append date to tar filename [default: no date]' )

    # Actions for info testing: These options display info/ test a list of guests only.
                  
    g0 = OptionGroup( p, "Actions for info testing", "These options display info or test a list of guests."  )
                  
    g0.add_option( '-i', '--info', dest='info', action='store_true', default=False,
                  help='info/test a list of guests (space delimited dom names)' )
                  
    g0.add_option( '--info-all', dest='infoall', action='store_true', default=False,
                  help='attempt to show info on ALL guests' )

    # WARNING: Dangerous options below, option grouping for scary actions
                  
    g1 = OptionGroup( p, "Actions for a list of dom names", "WARNING:  These options WILL bring down guests!"  )
    
    g1.add_option( '-b', '--backup', dest='backup', action='store_true', default=False,
                  help='backup a list of guests (space delimited dom names)' )
                  
    g1.add_option( '-r', '--reboot', dest='reboot', action='store_true', default=False,
                  help='reboot a list of guests (space delimited dom names)' )
                  
    g1.add_option( '-s', '--shutdown', dest='shutdown', action='store_true', default=False,
                  help='shutdown a list of guests (space delimited dom names)' )
                  
    g1.add_option( '-c', '--create', dest='create', action='store_true', default=False,
                  help='start a list of guests (space delimited dom names)' )
                  
    g2 = OptionGroup( p, "Actions for all doms", "WARNING:  These options WILL bring down ALL guests!"  )

    g2.add_option( '--backup-all', dest='backupall', action='store_true', default=False,
                  help='attempt to shutdown, backup, and start ALL guests' )

    g2.add_option( '--reboot-all', dest='rebootall', action='store_true', default=False,
                  help='attempt to shutdown and then start ALL guests' )
                  
    g2.add_option( '--shutdown-all', dest='shutdownall', action='store_true', default=False,
                  help='attempt to shutdown ALL guests' )

    g2.add_option( '--create-all', dest='createall', action='store_true', default=False,
                  help='attempt to start ALL guests' )

    # attach groups g1 and g2 to the parser p object
    p.add_option_group( g0 )
    p.add_option_group( g1 )
    p.add_option_group( g2 )

    # parse options and args
    options, guests = p.parse_args()

    # the actionsum should be 1 to continue, bool math ftw
    actionsum = sum( [  options.backup, options.reboot, options.shutdown,
                        options.create, options.info, options.backupall, options.rebootall, 
                        options.shutdownall, options.createall, options.infoall,] )

    if actionsum == 1:
        return options, guests
    else:
        exit("\nYou must have 1 action, no more, no less.\n\nRun 'virtback -h' for help.\n")

if __name__ == '__main__':
    """main application logic"""

    TODAY = str( date.today() )
    
    # Get the list of options and list of guest names from cli
    options, guests = getoptions()
    
    c = connect() # connect to libvirt
    domList = [] # this will store the dom objects
    
    if options.backup or options.reboot or options.shutdown or options.create or options.info: # if one of these actions true
        if guests: # make sure guests list is not empty
            for name in guests:
                try:
                    dom = c.lookupByName( name )
                    domList.append( dom )
                except libvirt.libvirtError:
                    pass # logit was registered to libvirt error handler
        else:
            exit("\nYou must have at lease 1 dom name.\n\nRun 'virtback -h' for help.\n")

    else:  
        if options.rebootall or options.shutdownall or options.backupall or options.infoall:
            # running guests
            for id in c.listDomainsID(): # loop over the running ids
                domList.append( c.lookupByID( id ) )
                
        if options.createall or options.backupall or options.infoall:
            # defined shut off guests
            for name in c.listDefinedDomains(): # loop over the shut off but defined domains
                domList.append( c.lookupByName( name ) )
        
    if options.backup or options.backupall: backup( domList )
    if options.reboot or options.rebootall: reboot( domList )
    if options.shutdown or options.shutdownall: shutdown( domList )
    if options.create or options.createall: create( domList )
    if options.info or options.infoall: info( domList )
