#! /usr/bin/python

############################################
# Author:    Russell.Ballestrini.net
# Date:      Fri Mar 18 15:56:59 EDT 2011
# License:   Public Domain
############################################

import libvirt
import tarfile
import syslog
from re import findall
from time import sleep
from datetime import date
from sys import exit
from optparse import OptionParser, OptionGroup
from operator import methodcaller

def connect():
    """ connect to qemu with read write access"""
    url = 'qemu:///system' # cli option? reboot all on remote server?
    c = libvirt.open( url )
    libvirt.registerErrorHandler( logit, 'libvirt error - ') # register logit as the error handler
    assert c, 'Failed to open connection ' + url
    return c

def invoke( domList, method, active=True ):
    """pattern to invoke shutdown, destroy, and start on a list of doms"""
    f = methodcaller( method )
    for dom in domList:
        if dom.isActive() == active:
            try:
                logit( method, 'invoking ' + method + ' on ' + dom.name() )
                f(dom)
            except libvirt.libvirtError:
                pass

def backup( domList ):
    """ Accept a domList, run backup proceedure on each """
    tarList = [] # this will be filled with tar filenames

    for dom in domList:
        shutdown([dom])
        if dom.isActive(): # if dom is active
            logit( 'error', 'we could not shutdown or destroy ' + dom.name() + 'and the BACKUP FAILED!' )
        else: # backup
            xml = dom.XMLDesc( 0 )
            xmlfile = '/tmp/' + dom.name() + '.xml'
            f = open( xmlfile, 'w')
            f.write( xml )
            f.close()
            disklist = findall( "<source file='(.*)'/>\n", xml )
            #filename = options.backpath + dom.name() + '-' + TODAY + '.tar.gz'
            filename = options.backpath + dom.name() + '.tar.gz'
            tar = tarfile.open( filename, 'w:gz' )
            logit( 'backup', 'starting backup for ' + dom.name() + ' to ' + filename )
            tar.add( xmlfile ) # add xml to tar
            tar.add( disklist[0] ) # we could loop and tar each disk file
            tar.close()
            logit( 'backup', 'finished backup for' + dom.name() )
            create([dom]) # start dom

def shutdown( domList, wait=20 ):
    """Accept a list of dom objects, attempt to shutdown"""
    invoke( domList, 'shutdown' ) # if active, attempt shutdown   
    sleep( wait )
    invoke( domList, 'destroy' ) # if active, attempt destroy
    sleep( wait/2 )

def create( domList ):
    """Accept a list of dom objects, attempt to start"""
    invoke( domList, 'create', active=False ) # if active, attempt shutdown   

def reboot( domList ):
    """Accept a list of dom objects, attempt to shutdown then start"""
    shutdown( domList )
    create( domList )


def logit( context, message ):
    """syslog and error handler"""
    if type( message ) is tuple:
        message = message[2] # libvirt message is a tuple

    if options.verbose:
        print context + ': ' +  message

    syslog.openlog( 'virtback', 0, syslog.LOG_LOCAL3 )
    syslog.syslog( message )
    syslog.closelog()

def getoptions():
    """fetch cli args, parse and map to python, test sanity"""

    # create an option parcer object
    p = OptionParser()

    p.add_option( '-v', '--verbose', dest='verbose', action='store_true', default=False,
                  help='verbose output to stdout [default: no output]' )

    p.add_option( '-p', '--path', dest='backpath', metavar='\'PATH\'', default='/KVMBACK/',
                  help='backup path & trailing slash [default: \'/KVMBACK/\']' )

    # WARNING: Dangerous options below, option grouping for scary actions

    g1 = OptionGroup( p, "Actions for a list of dom names", "WARNING:  These options WILL bring down guests!"  )
    
    g1.add_option( '-b', '--backup', dest='backup', action='store_true', default=False,
                  help='backup a list of guests (space delimited dom names)' )
                  
    g1.add_option( '-r', '--reboot', dest='reboot', action='store_true', default=False,
                  help='reboot a list of guests (space delimited dom names)' )
                  
    g1.add_option( '-s', '--shutdown', dest='shutdown', action='store_true', default=False,
                  help='shutdown a list of guests (space delimited dom names)' )
                  
    g1.add_option( '-c', '--create', dest='create', action='store_true', default=False,
                  help='start a list of guests (space delimited dom names)' )
                  
    g2 = OptionGroup( p, "Actions for all doms", "WARNING:  These options WILL bring down ALL guests!"  )

    g2.add_option( '--backup-all', dest='backupall', action='store_true', default=False,
                  help='attempt to shutdown, backup, and start ALL guests' )

    g2.add_option( '--reboot-all', dest='rebootall', action='store_true', default=False,
                  help='attempt to shutdown and then start ALL guests' )
                  
    g2.add_option( '--shutdown-all', dest='shutdownall', action='store_true', default=False,
                  help='attempt to shutdown ALL guests' )

    g2.add_option( '--create-all', dest='createall', action='store_true', default=False,
                  help='attempt to start ALL guests' )

    # attach groups g1 and g2 to the parser p object
    p.add_option_group( g1 )
    p.add_option_group( g2 )

    # parse options and args
    options, guests = p.parse_args()

    # the actionsum should be 1 to continue, bool math ftw
    actionsum = sum( [  options.backup, options.reboot, options.shutdown,
                        options.create, options.backupall, options.rebootall, 
                        options.shutdownall, options.createall ] )

    if actionsum == 1:
        return options, guests
    else:
        exit("\nYou must have 1 action, no more, no less.\n\nRun 'virtback -h' for help.\n")

if __name__ == '__main__':
    """main application logic"""

    TODAY = str( date.today() )
    
    # Get the list of dom objects based on cli options
    options, guests = getoptions()
    
    c = connect() # connect to libvirt
    domList = [] # this will store the dom objects
    
    if options.backup or options.reboot or options.shutdown or options.create: # if one of these actions true
        if guests: # make sure guests list is not empty
            for guest in guests:
                try:
                    dom = c.lookupByName( guest )
                    domList.append( dom )
                except libvirt.libvirtError:
                    pass # logit was registered to libvirt error handler
        else:
            exit("\nYou must have at lease 1 dom name.\n\nRun 'virtback -h' for help.\n")

    elif options.backupall or options.rebootall or options.shutdownall or options.createall:
        for id in c.listDomainsID(): # loop over the running ids
            domList.append( c.lookupByID( id ) )
        
    if options.backup or options.backupall: backup( domList )
    if options.reboot or options.rebootall: reboot( domList )
    if options.shutdown or options.shutdownall: shutdown( domList )
    if options.create or options.createall: create( domList )
