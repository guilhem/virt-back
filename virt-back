#! /usr/bin/python

############################################
# Program:   virt-back.py
# Author:    Russell.Ballestrini.net
# Date:      Fri Mar 18 15:56:59 EDT 2011
# License:   Public Domain
############################################

DESCRIPTION = """A backup utility for QEMU, KVM, XEN, and Virtualbox guests.
Virt-back is a python application that uses the libvirt api to safely 
shutdown, gzip, and restart guests.  The backup process logs to syslog
for auditing and virt-back works great with cron for scheduling outages.
Virt-back has been placed in the public domain and 
the latest version may be downloaded here:
https://bitbucket.org/russellballestrini/virt-back
"""

import libvirt
import tarfile
import syslog
from re import findall
from time import sleep
from datetime import date
from sys import exit
from optparse import OptionParser, OptionGroup
from os.path import isfile
from os import remove
from shutil import move, copy2

try:
    from operator import methodcaller
except ImportError:
    def methodcaller(name, *args, **kwargs):
        def caller(obj):
            return getattr(obj, name)(*args, **kwargs)
        return caller

def connect( uri = None ):
    """ connect to hypervisor uri with read write access"""
    libvirt.registerErrorHandler( logit, 'libvirt error') # register logit as the error handler
    
    try:
        c = libvirt.open( uri )
    except:
        c = None

    if c: return c
    else: exit( "Failed to open connection to the hypervisor" )

def invoke( domList, method ):
    """pattern to invoke shutdown, destroy, and start on a list of doms"""
    f = methodcaller( method )
    for dom in domList:
        try:
            logit( method, 'invoking %s on %s' % (method, dom.name()) )
            retcode = f(dom)
            if retcode: logit( method, '%s returned %s on %s' % (method, retcode, dom.name()) ) # log retcode
        except libvirt.libvirtError:
            pass

def backup( domList ):
    """ Accept a domList, run backup proceedure on each """

    for dom in domList:
    
        recreate = dom.isActive()
    
        if dom.isActive(): # if dom is active, shutdown
            shutdown([dom])
            
        if dom.isActive(): # if dom is active, error
            logit( 'error', 'we could not shutdown or destroy %s and the BACKUP FAILED!' % dom.name() )

        else: # backup
            xml = dom.XMLDesc( 0 )
            xmlfile = options.backpath + dom.name() + '.xml'
            f = open( xmlfile, 'w')
            f.write( xml )
            f.close()
            disklist = findall( "<source file='(.*)'/>\n", xml )

            logit( 'backup', 'invoking backup for ' + dom.name() )
            
	    for disk_source in disklist:
                disk_dest = options.backpath + disk_source.split('/')[-1]
                logit( 'backup', 
		  'copying %s to %s for %s' % (disk_source, disk_dest, dom.name())
		)
                copy2( disk_source, disk_dest )
            
            if recreate: # determine if guest should be started up after backup
                create([dom]) # start dom

            if options.nogzip: # skip gzip logic 
                logit( 'backup', 'finished backup for ' + dom.name() )
                continue

            if options.tardate: tarpath = options.backpath + dom.name() + '-' + TODAY + '.tar.gz'
            else: tarpath = options.backpath + dom.name() + '.tar.gz'
            
            if isfile( tarpath ): # if the file exists, rotate up to 3 version
                logit( 'backup', 'rotating backup files for ' + dom.name() )
                try: remove( tarpath + '.2' )
                except OSError: pass
                
                try: move( tarpath + '.1', tarpath + '.2' )
                except IOError: pass
                
                move( tarpath, tarpath + '.1' )

            logit( 'backup', 'gzipping files for %s to %s' % (dom.name(), tarpath) )
            tar = tarfile.open( tarpath, 'w:gz' )

            logit( 'backup', 'gzipping %s for %s' % (xmlfile, dom.name()) )
            tar.add( xmlfile ) # add xml to tar
            remove( xmlfile ) # cleanup tmp files

            for disk_source in disklist:
                disk_dest = options.backpath + disk_source.split('/')[-1]

                logit( 'backup', 'gzipping %s for %s' % (disk_dest, dom.name()) )
                tar.add( disk_dest ) # add img to tar 
                remove( disk_dest ) # cleanup tmp files
            
	    tar.close()

            logit( 'backup', 'finished backup for ' + dom.name() )
            
def shutdown( domList, wait=180 ):
    """Accept a list of dom objects, attempt to shutdown the active ones"""
    # get all running guests from list and invoke shutdown   
    invoke( get_all_running( domList ), 'shutdown' )

    """loop until all guests are shut off or destroy 
       all active guests if wait timer is reached."""

    secs = 10
    wait /= secs # divide wait by secs 

    for i in range( 0, wait + 1 ):

        # if all doms are shut off, leave loop
        if check_all_shutoff( domList ): 
            break
        else:
            logit(
              'shutdown', 
              'waited ' + str( i * secs ) + ' seconds for ' + 
              ', '.join( dom.name() for dom in get_all_running( domList ) ) +
              ' to shut off'
            )

        # if the wait time is reached, destroy all active doms
        if i == wait: 
            invoke( get_all_running( domList ) ,'destroy' )
        
        sleep( secs )

def create( domList ):
    """Accept a list of dom objects, attempt to start the inactive ones"""
    # get all shutoff guests from list and invoke create   
    invoke( get_all_shutoff( domList ), 'create' )

def reboot( domList ):
    """Accept a list of dom objects, attempt to shutdown then start"""
    shutdown( domList )
    create( domList )
    
def info( domList ):
    """Accept a list of dom objects, attempt to display info for all"""
    #invoke( domList, 'name' )
    #invoke( domList, 'info')
    if check_all_running( domList ): print "NOTE: All guests are running"
    if check_all_shutoff( domList ): print "NOTE: All guests are shut off"
    
    print ''
    print 'running guests: ' + ', '.join( [ dom.name() for dom in get_all_running( domList ) ] )
    print 'shutoff guests: ' + ', '.join( [ dom.name() for dom in get_all_shutoff( domList ) ] )
    print ''
    print 'DomName'.ljust(16) + 'Memory(MB)'.ljust(12) + 'vCPUs'.ljust(8) + 'CPUtime(ns)'
    print '========================================================================'
    for dom in domList:
        name = dom.name()
        rams = str(dom.info()[2]/1024) + '/' + str(dom.info()[1]/1024)
        cpus = str(dom.info()[3])
        time = str(dom.info()[4])
        print name.ljust(16) + rams.ljust(12) + cpus.ljust(8) + time


def check_all_running( domList ):
    """Accept a list of dom objects, check if all guest dom are active"""
    if sum( [dom.isActive() for dom in domList] ) == len( domList ):
        return True
    return False

def check_all_shutoff( domList ):
    """Accept a list of dom objects, check if all guest dom are shut off"""
    if sum( [dom.isActive() for dom in domList] ):
        return False
    return True

def get_all_running( domList ):
    """Accept a list of dom objects, return a list of running dom objects"""
    return [ dom for dom in domList if dom.isActive() ]

def get_all_shutoff( domList ):
    """Accept a list of dom objects, return a list of shutoff dom objects"""
    return [ dom for dom in domList if not dom.isActive() ]


def logit( context, message ):
    """syslog and error handler"""
    if type( message ) is tuple:
        message = message[2] # libvirt message is a tuple

    if options.quiet:
        pass 
    else:
        print context + ': ' +  message

    syslog.openlog( 'virt-back', 0, syslog.LOG_LOCAL3 )
    syslog.syslog( message )
    syslog.closelog()

def getoptions():
    """fetch cli args, parse and map to python, test sanity"""

    # create an option parcer object
    p = OptionParser()

    p.set_description( DESCRIPTION )
    
    p.add_option( '-q', '--quiet', dest='quiet', action='store_true', default=False,
                  help='prevent output to stdout' )

    p.add_option( '-d', '--date', dest='tardate', action='store_true', default=False,
                  help='append date to tar filename [default: no date]' )

    p.add_option( '-g', '--no-gzip', dest='nogzip', action='store_true', default=False,
                  help='do not gzip or tar the resulting files' )

    p.add_option( '-p', '--path', dest='backpath', metavar="'PATH'", default='/KVMBACK/',
                  help="backup path & trailing slash [default: '/KVMBACK/']" )
    
    p.add_option( '-u', '--uri', dest='uri', metavar="'URI'",
                  help="optional hypervisor uri" )

    # Actions for info testing: These options display info/ test a list of guests only.
                  
    g0 = OptionGroup( p, "Actions for info testing", "These options display info or test a list of guests."  )
                  
    g0.add_option( '-i', '--info', dest='info', action='store_true', default=False,
                  help='info/test a list of guests (space delimited dom names)' )
                  
    g0.add_option( '--info-all', dest='infoall', action='store_true', default=False,
                  help='attempt to show info on ALL guests' )

    # WARNING: Dangerous options below, option grouping for scary actions
                  
    g1 = OptionGroup( p, "Actions for a list of dom names", "WARNING:  These options WILL bring down guests!"  )
    
    g1.add_option( '-b', '--backup', dest='backup', action='store_true', default=False,
                  help='backup a list of guests (space delimited dom names)' )
                  
    g1.add_option( '-r', '--reboot', dest='reboot', action='store_true', default=False,
                  help='reboot a list of guests (space delimited dom names)' )
                  
    g1.add_option( '-s', '--shutdown', dest='shutdown', action='store_true', default=False,
                  help='shutdown a list of guests (space delimited dom names)' )
                  
    g1.add_option( '-c', '--create', dest='create', action='store_true', default=False,
                  help='start a list of guests (space delimited dom names)' )
                  
    g2 = OptionGroup( p, "Actions for all doms", "WARNING:  These options WILL bring down ALL guests!"  )

    g2.add_option( '--backup-all', dest='backupall', action='store_true', default=False,
                  help='attempt to shutdown, backup, and start ALL guests' )

    g2.add_option( '--reboot-all', dest='rebootall', action='store_true', default=False,
                  help='attempt to shutdown and then start ALL guests' )
                  
    g2.add_option( '--shutdown-all', dest='shutdownall', action='store_true', default=False,
                  help='attempt to shutdown ALL guests' )

    g2.add_option( '--create-all', dest='createall', action='store_true', default=False,
                  help='attempt to start ALL guests' )

    # attach groups g1 and g2 to the parser p object
    p.add_option_group( g0 )
    p.add_option_group( g1 )
    p.add_option_group( g2 )

    # parse options and args
    options, guests = p.parse_args()

    # the actionsum should be 1 to continue, bool math ftw
    actionsum = sum( [  options.backup, options.reboot, options.shutdown,
                        options.create, options.info, options.backupall, options.rebootall, 
                        options.shutdownall, options.createall, options.infoall,] )

    if actionsum == 1:
        return options, guests
    else:
        exit("\nYou must have 1 action, no more, no less.\n\nRun 'virt-back --help' for help.\n")

if __name__ == '__main__':
    """main application logic"""

    TODAY = str( date.today() )
    
    # Get the list of options and list of guest names from cli
    options, guests = getoptions()
    
    c = connect( options.uri ) # connect to hypervisor with libvirt
    domList = [] # this will store the dom objects
    
    if options.backup or options.reboot or options.shutdown or options.create or options.info: # if one of these actions true
        if guests: # make sure guests list is not empty
            for name in guests:
                try:
                    dom = c.lookupByName( name )
                    domList.append( dom )
                except libvirt.libvirtError:
                    pass # logit was registered to libvirt error handler
        else:
            exit("\nYou must have at lease 1 dom name.\n\nRun 'virt-back --help' for help.\n")

    else:  
        if options.rebootall or options.shutdownall or options.backupall or options.infoall:
            # running guests
            for id in c.listDomainsID(): # loop over the running ids
                dom = c.lookupByID( id ) # fetch dom object by id
                if 'Domain-' not in dom.name(): # prevent actions on the Xen hypervisor
                    domList.append( dom ) # append dom object to domList
 
        if options.createall or options.backupall or options.infoall:
            # defined shut off guests
            for name in c.listDefinedDomains(): # loop over the shut off but defined domains
                domList.append( c.lookupByName( name ) )
        
    if options.backup or options.backupall: backup( domList )
    if options.reboot or options.rebootall: reboot( domList )
    if options.shutdown or options.shutdownall: shutdown( domList )
    if options.create or options.createall: create( domList )
    if options.info or options.infoall: info( domList )
